from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from src.referalbot.database import repository
from src.referalbot.utils import logger
from aiogram import Bot
from src.referalbot.config import TELEGRAM_TOKEN

router = Router()
bot = Bot(token=TELEGRAM_TOKEN)

def main_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã", callback_data="check_bonuses")],
        [InlineKeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π", callback_data="bonus_history")],
        [InlineKeyboardButton(text="–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="invite_friend")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="help_info")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(CommandStart(deep_link=True))
async def start_with_referral(message: types.Message, command, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        ref_code = command.args

        if not ref_code or not ref_code.startswith("REF_"):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
            return

        ref_code_clean = ref_code.replace("REF_", "")
        
        async with session.begin():
            user = await repository.get_or_create_user(session, telegram_id, username)
            inviter = await repository.get_user_by_promo_code(session, ref_code_clean)
            
            if inviter and inviter.telegram_id != telegram_id and not user.invited_by_id:
                user.invited_by_id = inviter.id
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5% —Å–∫–∏–¥–∫—É –ø–æ –∫–æ–¥—É {ref_code} –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ Bali Love Consulting üéÅ\n\n"
                    f"üîë –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:: {user.promo_code}\n\n"
                    f"–ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ ‚Äî –∏ —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                    f"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –±–æ–Ω—É—Å–æ–≤?\n"
                    f"üì≤ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}",
                    reply_markup=main_keyboard()
                )
            else:
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bali Love, {username}!\n"
                    f"üéâ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n\n"
                    f"üì© –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –∑–∞ –∫–∞–∂–¥—É—é –∏—Ö –ø–æ–∫—É–ø–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% –æ—Ç —Å—É–º–º—ã –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç. –ë–æ–Ω—É—Å–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ Bali Love.\n"
                    f"üí∏ –ê –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—Ç —Å–∫–∏–¥–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.\n"
                    f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {ref_code} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∫–æ–¥.",
                    reply_markup=main_keyboard()
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")

@router.message(CommandStart())
async def start(message: types.Message, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        async with session.begin():
            user = await repository.get_or_create_user(session, telegram_id, username)
                
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bali Love, {username}!\n"
            f"üéâ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n\n"
            f"üì© –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π ‚Äî –∑–∞ –∫–∞–∂–¥—É—é –∏—Ö –ø–æ–∫—É–ø–∫—É –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 5% –æ—Ç —Å—É–º–º—ã –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç. –ë–æ–Ω—É—Å–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ª—é–±—ã–µ —É—Å–ª—É–≥–∏ Bali Love.\n"
            f"üí∏ –ê –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—Ç —Å–∫–∏–¥–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏.",
            reply_markup=main_keyboard()
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start.")

@router.callback_query(F.data == "help_info")
async def help_command_callback(callback: types.CallbackQuery):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ help_info –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        await callback.message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±–æ–Ω—É—Å–∞–º\n"
            "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏\n"
            "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
            "–ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_info: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /help.")
        await callback.answer()

@router.callback_query(F.data == "check_bonuses")
async def check_bonuses_callback(callback: types.CallbackQuery, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ check_bonuses –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, callback.from_user.id)
            if not user:
                await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                await callback.answer()
                return

            balance_data = await repository.get_bonus_balance(session, user.id)

        available = balance_data['available_balance']
        pending = balance_data['pending_balance']
        weekly = balance_data['weekly_earnings']
        total = balance_data['total_earned']

        response_text = (
            f"üí≥ *–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:*\n\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫ —Å–ø–∏—Å–∞–Ω–∏—é: **{int(available):,} IDR**\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: **{int(pending):,} IDR**\n\n"
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:*\n"
            f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: **+{int(weekly):,} IDR**\n"
            f"–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: **+{int(total):,} IDR**\n\n"
            f"_–î–ª—è –≤—ã–ø–ª–∞—Ç—ã –±–æ–Ω—É—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º._"
        )

        await callback.message.answer(response_text, parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_bonuses: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ–Ω—É—Å–æ–≤.")
        await callback.answer()

@router.callback_query(F.data == "bonus_history")
async def bonus_history_callback(callback: types.CallbackQuery, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ bonus_history –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, callback.from_user.id)
            if not user:
                await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                await callback.answer()
                return

            history = await repository.get_bonus_history(session, user.id)

        if not history:
            await callback.message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏ –ø—É—Å—Ç–∞.")
            await callback.answer()
            return

        response_lines = ["üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π:**\n"]
        for entry in history:
            sign = "+" if entry.amount > 0 else ""
            amount_formatted = f"{entry.amount:,}"
            date_formatted = entry.date.strftime('%d.%m.%Y')

            line = f"`{date_formatted}`: **{sign}{amount_formatted} IDR**\n_{entry.operation} ({entry.description})_"
            response_lines.append(line)

        await callback.message.answer("\n\n".join(response_lines), parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ bonus_history: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.")
        await callback.answer()

@router.callback_query(F.data == "invite_friend")
async def invite_friend_callback(callback: types.CallbackQuery, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ invite_friend –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    try:
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, callback.from_user.id)
        if not user:
            await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            await callback.answer()
            return
        await callback.message.answer(
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ invite_friend: {e}")
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /invite.")
        await callback.answer()