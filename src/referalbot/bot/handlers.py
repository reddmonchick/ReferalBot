from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timedelta
from sqlalchemy import func # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º func –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SUM
from referalbot.database.models import User, Purchase, BonusHistory
from referalbot.database import repository
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–¥–µ–ª—å Purchase
from referalbot.api.routes import log_bonus_history
from referalbot.utils import logger
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Bot
from referalbot.config import TELEGRAM_TOKEN

router = Router()
bot = Bot(token=TELEGRAM_TOKEN)

@router.message(CommandStart(deep_link=True))
async def start_with_referral(message: types.Message, command, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        ref_code = command.args

        if not ref_code or not ref_code.startswith("REF_"):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
            return

        ref_code_clean = ref_code.replace("REF_", "")
        
        async with session.begin():
            user = await repository.get_or_create_user(session, telegram_id, username)
            inviter = await repository.get_user_by_promo_code(session, ref_code_clean)
            
            if inviter and inviter.telegram_id != telegram_id:
                user.invited_by_id = inviter.id
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n"
                    f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ 5% —Å–∫–∏–¥–∫—É –ø–æ –∫–æ–¥—É {ref_code} –Ω–∞ –≤—Å–µ —É—Å–ª—É–≥–∏ Bali Love Consulting!!\n"
                    f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n"
                    f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}"
                )
            else:
                await message.answer(
                    f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n"
                    f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n"
                    f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}\n"
                    f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ {ref_code} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω."
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏.")

@router.message(CommandStart())
async def start(message: types.Message, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        async with session.begin():
            user = await repository.get_or_create_user(session, telegram_id, username)
                
        await message.answer(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}!\n"
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start.")

@router.message(Command("promo"))
async def get_promo(message: types.Message, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /promo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, telegram_id)
            if not user:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return
        await message.answer(
            f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {user.promo_code}\n"
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /promo: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /promo.")

@router.message(Command("help"))
async def help_command(message: types.Message):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /help –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        await message.answer(
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
            "/promo - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
            "/bonuses - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–æ–Ω—É—Å—ã\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n" 
            "/invite - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /help: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /help.")

@router.message(Command("bonuses"))
async def check_bonuses(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bonuses.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏ –æ–∂–∏–¥–∞—é—â–∏–π –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å.
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /bonuses –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, telegram_id)
            if not user:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            balance_data = await repository.get_bonus_balance(session, user.id)
            
            available_balance = balance_data['available_balance']
            pending_balance = balance_data['pending_balance']

            await message.answer(
                f"üí≥ *–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å:*\n\n"
                f"‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ –∫ —Å–ø–∏—Å–∞–Ω–∏—é:*\n"
                f"**{available_balance:,} IDR**\n\n"
                f"‚è≥ *–û–∂–∏–¥–∞—é—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:*\n"
                f"**{pending_balance:,} IDR**\n\n"
                f"_–î–ª—è –≤—ã–ø–ª–∞—Ç—ã –±–æ–Ω—É—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º._",
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /bonuses: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ–Ω—É—Å–æ–≤.")

@router.message(Command("history"))
async def bonus_history(message: types.Message, session: AsyncSession):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –±—ã–ª –ø–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /history –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, telegram_id)
            if not user:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return

            history = await repository.get_bonus_history(session, user.id)

            if not history:
                await message.answer("–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ–Ω—É—Å–∞–º–∏ –ø—É—Å—Ç–∞.")
                return

            response = "üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –æ–ø–µ—Ä–∞—Ü–∏–π:**\n\n"
            for entry in history:
                amount_formatted = f"{entry.amount:,}"
                sign = "+" if entry.amount > 0 else ""
                response += f"`{entry.date.strftime('%d.%m.%Y')}`: **{sign}{amount_formatted} IDR**\n"
                response += f"_{entry.operation} ({entry.description})_\n\n"

            await message.answer(response, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /history: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.")

@router.message(Command("invite"))
async def invite_friend(message: types.Message, session: AsyncSession):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /invite –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        telegram_id = message.from_user.id
        async with session.begin():
            user = await repository.get_user_by_telegram_id(session, telegram_id)
            if not user:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
                return
        await message.answer(
            f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π: t.me/bali_referal_bot?start=REF_{user.promo_code}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /invite: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /invite.")